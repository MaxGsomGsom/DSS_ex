
typedef unsigned char byte;


int _primPoly = 0x11d;
byte _primElem = 0b10; //primitive element of field

byte gf_log_table[] = {0, 0, 1, 25, 2, 50, 26, 198, 3, 223, 51, 238, 27, 104, 199,
    75, 4, 100, 224, 14, 52, 141, 239, 129, 28, 193, 105, 248, 200, 8, 76, 113,
    5, 138, 101, 47, 225, 36, 15, 33, 53, 147, 142, 218, 240, 18, 130, 69, 29,
    181, 194, 125, 106, 39, 249, 185, 201, 154, 9, 120, 77, 228, 114, 166, 6,
    191, 139, 98, 102, 221, 48, 253, 226, 152, 37, 179, 16, 145, 34, 136, 54,
    208, 148, 206, 143, 150, 219, 189, 241, 210, 19, 92, 131, 56, 70, 64, 30,
    66, 182, 163, 195, 72, 126, 110, 107, 58, 40, 84, 250, 133, 186, 61, 202,
    94, 155, 159, 10, 21, 121, 43, 78, 212, 229, 172, 115, 243, 167, 87, 7, 112,
    192, 247, 140, 128, 99, 13, 103, 74, 222, 237, 49, 197, 254, 24, 227, 165,
    153, 119, 38, 184, 180, 124, 17, 68, 146, 217, 35, 32, 137, 46, 55, 63, 209,
    91, 149, 188, 207, 205, 144, 135, 151, 178, 220, 252, 190, 97, 242, 86, 211,
    171, 20, 42, 93, 158, 132, 60, 57, 83, 71, 109, 65, 162, 31, 45, 67, 216,
    183, 123, 164, 118, 196, 23, 73, 236, 127, 12, 111, 246, 108, 161, 59, 82,
    41, 157, 85, 170, 251, 96, 134, 177, 187, 204, 62, 90, 203, 89, 95, 176,
    156, 169, 160, 81, 11, 245, 22, 235, 122, 117, 44, 215, 79, 174, 213, 233,
    230, 231, 173, 232, 116, 214, 244, 234, 168, 80, 88, 175};

byte gf_exp_table[] = {1, 2, 4, 8, 16, 32, 64, 128, 29, 58, 116, 232, 205, 135, 19,
    38, 76, 152, 45, 90, 180, 117, 234, 201, 143, 3, 6, 12, 24, 48, 96, 192,
    157, 39, 78, 156, 37, 74, 148, 53, 106, 212, 181, 119, 238, 193, 159, 35,
    70, 140, 5, 10, 20, 40, 80, 160, 93, 186, 105, 210, 185, 111, 222, 161, 95,
    190, 97, 194, 153, 47, 94, 188, 101, 202, 137, 15, 30, 60, 120, 240, 253,
    231, 211, 187, 107, 214, 177, 127, 254, 225, 223, 163, 91, 182, 113, 226,
    217, 175, 67, 134, 17, 34, 68, 136, 13, 26, 52, 104, 208, 189, 103, 206,
    129, 31, 62, 124, 248, 237, 199, 147, 59, 118, 236, 197, 151, 51, 102, 204,
    133, 23, 46, 92, 184, 109, 218, 169, 79, 158, 33, 66, 132, 21, 42, 84, 168,
    77, 154, 41, 82, 164, 85, 170, 73, 146, 57, 114, 228, 213, 183, 115, 230,
    209, 191, 99, 198, 145, 63, 126, 252, 229, 215, 179, 123, 246, 241, 255,
    227, 219, 171, 75, 150, 49, 98, 196, 149, 55, 110, 220, 165, 87, 174, 65,
    130, 25, 50, 100, 200, 141, 7, 14, 28, 56, 112, 224, 221, 167, 83, 166, 81,
    162, 89, 178, 121, 242, 249, 239, 195, 155, 43, 86, 172, 69, 138, 9, 18, 36,
    72, 144, 61, 122, 244, 245, 247, 243, 251, 235, 203, 139, 11, 22, 44, 88,
    176, 125, 250, 233, 207, 131, 27, 54, 108, 216, 173, 71, 142, 1, 2, 4, 8,
    16, 32, 64, 128, 29, 58, 116, 232, 205, 135, 19, 38, 76, 152, 45, 90, 180,
    117, 234, 201, 143, 3, 6, 12, 24, 48, 96, 192, 157, 39, 78, 156, 37, 74,
    148, 53, 106, 212, 181, 119, 238, 193, 159, 35, 70, 140, 5, 10, 20, 40, 80,
    160, 93, 186, 105, 210, 185, 111, 222, 161, 95, 190, 97, 194, 153, 47, 94,
    188, 101, 202, 137, 15, 30, 60, 120, 240, 253, 231, 211, 187, 107, 214, 177,
    127, 254, 225, 223, 163, 91, 182, 113, 226, 217, 175, 67, 134, 17, 34, 68,
    136, 13, 26, 52, 104, 208, 189, 103, 206, 129, 31, 62, 124, 248, 237, 199,
    147, 59, 118, 236, 197, 151, 51, 102, 204, 133, 23, 46, 92, 184, 109, 218,
    169, 79, 158, 33, 66, 132, 21, 42, 84, 168, 77, 154, 41, 82, 164, 85, 170,
    73, 146, 57, 114, 228, 213, 183, 115, 230, 209, 191, 99, 198, 145, 63, 126,
    252, 229, 215, 179, 123, 246, 241, 255, 227, 219, 171, 75, 150, 49, 98, 196,
    149, 55, 110, 220, 165, 87, 174, 65, 130, 25, 50, 100, 200, 141, 7, 14, 28,
    56, 112, 224, 221, 167, 83, 166, 81, 162, 89, 178, 121, 242, 249, 239, 195,
    155, 43, 86, 172, 69, 138, 9, 18, 36, 72, 144, 61, 122, 244, 245, 247, 243,
    251, 235, 203, 139, 11, 22, 44, 88, 176, 125, 250, 233, 207, 131, 27, 54,
    108, 216, 173, 71, 142};


// === Without tables ===

inline byte GF_sum(byte a, byte b) {
    return a^b;
}

inline byte GF_sub(byte a, byte b) {
    return a^b;
}

inline byte GF_mulX(byte a) {

    //if A will overflow, then substract prim_poly (with XOR) and shift
    if (a & 0b10000000)
        a = (a << 1) ^ _primPoly;
    //else simple shift to left
    else
        a <<= 1;

    return a;
}

inline byte GF_mul(byte a, byte b) {

    //if (a == 0 || b == 0) return 0;

    byte sum = 0;

    //if a and contains ones bits
    //for every bit of A
    while (a && b) {

        //if current bit of B = 1, add A to sum (with XOR)
        if (b & 1)
            sum ^= a;

        //shift B to next bit
        b >>= 1;

        a = GF_mulX(a);
    }

    return sum;
}

inline byte GF_inv(byte a);
inline byte GF_div(byte a, byte b) {
    return GF_mul(a, GF_inv(b));
}

inline byte GF_pow(byte a, byte n) {

    if (n==0) return 1;
    byte a_copy = a;

    //simple loop with mul
    while (n>1) {
        a = GF_mul(a, a_copy);
        n--;
    }

    return a;
}

inline byte GF_log(byte a) {

    if (a == 0 || a == 1) return 0;

    byte n = 1;

    //brute force
    while (GF_pow(_primElem, n) != a)
        n++;

    return n;
}


inline byte GF_inv(byte a) {
    //a^-1 = a^254
    a = GF_pow(a, 254);
}


// === With tables ===

inline byte GF_mul2(byte a, byte b)
{
    if (a == 0 || b == 0) return 0;

    return gf_exp_table[(gf_log_table[a] + gf_log_table[b]) % 255];
}


inline byte GF_div2(byte a, byte b)
{
    if (a == 0) return 0;
    return gf_exp_table[(gf_log_table[a] + 255 - gf_log_table[b]) % 255];
}


inline byte GF_pow2(byte a, byte n)
{
    byte num = (gf_log_table[a] * n) % 255;

    if (num < 0)
    {
        num += 255;
    }

    return gf_exp_table[num];
}


inline byte GF_log2(byte a) {

    //return from table
    return gf_log_table[a];
}


inline byte GF_inv2(byte a)
{
    //a^-1 = a^254
    return gf_exp_table[255 - gf_log_table[a]];
}

// === Primitives (ex 6) ===


//return count of primitives
byte GF_find_prim_elems() {

    bool* flags = new bool[256];
    byte count = 0;

    //for every element
    for (int elem=0; elem<256; elem++) {

        //reset flags
        for (int i=0; i<256; i++) {
            flags[i]=0;
        }

        //calc other elements by rising ELEM in degrees
        for (int i=0; i<256; i++) {
            flags[GF_pow(elem, i)]=true;
        }

        //count sum of flags
        byte sum=0;
        for (int i=0; i<256; i++) {
            sum+=flags[i];
        }

        //if all elements (except 0) are degrees of ELEM, it's primitive
        if (sum == 255) {
            //cout << "primitive=" << (int)elem << endl;
            count++;
        }
        //else
        //    cout << "sum=" << (int)sum << endl;

    }

    delete [] flags;

    return count;
}
